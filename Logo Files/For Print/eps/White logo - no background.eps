%!PS-Adobe-3.0 EPSF-3.0
%Produced by poppler pdftops version: 22.05.0 (http://poppler.freedesktop.org)
%%Creator: Chromium
%%LanguageLevel: 3
%%DocumentSuppliedResources: (atend)
%%BoundingBox: 0 0 2419 1084
%%HiResBoundingBox: 0 0 2418.96 1083.12
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset xpdf 3.00 0
%%Copyright: Copyright 1996-2011, 2022 Glyph & Cog, LLC
/xpdf 75 dict def xpdf begin
% PDF special state
/pdfDictSize 15 def
/pdfSetup {
  /setpagedevice where {
    pop 2 dict begin
      /Policies 1 dict dup begin /PageSize 6 def end def
      { /Duplex true def } if
    currentdict end setpagedevice
  } {
    pop
  } ifelse
} def
/pdfSetupPaper {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
/pdfStartPage {
  pdfDictSize dict begin
  /pdfFillCS [] def
  /pdfFillXform {} def
  /pdfStrokeCS [] def
  /pdfStrokeXform {} def
  /pdfFill [0] def
  /pdfStroke [0] def
  /pdfFillOP false def
  /pdfStrokeOP false def
  /pdfOPM false def
  /pdfLastFill false def
  /pdfLastStroke false def
  /pdfTextMat [1 0 0 1 0 0] def
  /pdfFontSize 0 def
  /pdfCharSpacing 0 def
  /pdfTextRender 0 def
  /pdfPatternCS false def
  /pdfTextRise 0 def
  /pdfWordSpacing 0 def
  /pdfHorizScaling 1 def
  /pdfTextClipPath [] def
} def
/pdfEndPage { end } def
% PDF color state
/opm { dup /pdfOPM exch def
      /setoverprintmode where{pop setoverprintmode}{pop}ifelse  } def
/cs { /pdfFillXform exch def dup /pdfFillCS exch def
      setcolorspace } def
/CS { /pdfStrokeXform exch def dup /pdfStrokeCS exch def
      setcolorspace } def
/sc { pdfLastFill not { pdfFillCS setcolorspace } if
      dup /pdfFill exch def aload pop pdfFillXform setcolor
     /pdfLastFill true def /pdfLastStroke false def } def
/SC { pdfLastStroke not { pdfStrokeCS setcolorspace } if
      dup /pdfStroke exch def aload pop pdfStrokeXform setcolor
     /pdfLastStroke true def /pdfLastFill false def } def
/op { /pdfFillOP exch def
      pdfLastFill { pdfFillOP setoverprint } if } def
/OP { /pdfStrokeOP exch def
      pdfLastStroke { pdfStrokeOP setoverprint } if } def
/fCol {
  pdfLastFill not {
    pdfFillCS setcolorspace
    pdfFill aload pop pdfFillXform setcolor
    pdfFillOP setoverprint
    /pdfLastFill true def /pdfLastStroke false def
  } if
} def
/sCol {
  pdfLastStroke not {
    pdfStrokeCS setcolorspace
    pdfStroke aload pop pdfStrokeXform setcolor
    pdfStrokeOP setoverprint
    /pdfLastStroke true def /pdfLastFill false def
  } if
} def
% build a font
/pdfMakeFont {
  4 3 roll findfont
  4 2 roll matrix scale makefont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /Encoding exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16 {
  exch findfont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /WMode exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16L3 {
  1 index /CIDFont resourcestatus {
    pop pop 1 index /CIDFont findresource /CIDFontType known
  } {
    false
  } ifelse
  {
    0 eq { /Identity-H } { /Identity-V } ifelse
    exch 1 array astore composefont pop
  } {
    pdfMakeFont16
  } ifelse
} def
% graphics state operators
/q { gsave pdfDictSize dict begin } def
/Q {
  end grestore
  /pdfLastFill where {
    pop
    pdfLastFill {
      pdfFillOP setoverprint
    } {
      pdfStrokeOP setoverprint
    } ifelse
  } if
  /pdfOPM where {
    pop
    pdfOPM /setoverprintmode where{pop setoverprintmode}{pop}ifelse 
  } if
} def
/cm { concat } def
/d { setdash } def
/i { setflat } def
/j { setlinejoin } def
/J { setlinecap } def
/M { setmiterlimit } def
/w { setlinewidth } def
% path segment operators
/m { moveto } def
/l { lineto } def
/c { curveto } def
/re { 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
      neg 0 rlineto closepath } def
/h { closepath } def
% path painting operators
/S { sCol stroke } def
/Sf { fCol stroke } def
/f { fCol fill } def
/f* { fCol eofill } def
% clipping operators
/W { clip newpath } def
/W* { eoclip newpath } def
/Ws { strokepath clip newpath } def
% text state operators
/Tc { /pdfCharSpacing exch def } def
/Tf { dup /pdfFontSize exch def
      dup pdfHorizScaling mul exch matrix scale
      pdfTextMat matrix concatmatrix dup 4 0 put dup 5 0 put
      exch findfont exch makefont setfont } def
/Tr { /pdfTextRender exch def } def
/Tp { /pdfPatternCS exch def } def
/Ts { /pdfTextRise exch def } def
/Tw { /pdfWordSpacing exch def } def
/Tz { /pdfHorizScaling exch def } def
% text positioning operators
/Td { pdfTextMat transform moveto } def
/Tm { /pdfTextMat exch def } def
% text string operators
/xyshow where {
  pop
  /xyshow2 {
    dup length array
    0 2 2 index length 1 sub {
      2 index 1 index 2 copy get 3 1 roll 1 add get
      pdfTextMat dtransform
      4 2 roll 2 copy 6 5 roll put 1 add 3 1 roll dup 4 2 roll put
    } for
    exch pop
    xyshow
  } def
}{
  /xyshow2 {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval show moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval show moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/cshow where {
  pop
  /xycp {
    0 3 2 roll
    {
      pop pop currentpoint 3 2 roll
      1 string dup 0 4 3 roll put false charpath moveto
      2 copy get 2 index 2 index 1 add get
      pdfTextMat dtransform rmoveto
      2 add
    } exch cshow
    pop pop
  } def
}{
  /xycp {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval false charpath moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval false charpath moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/Tj {
  fCol
  0 pdfTextRise pdfTextMat dtransform rmoveto
  currentpoint 4 2 roll
  pdfTextRender 1 and 0 eq {
    2 copy xyshow2
  } if
  pdfTextRender 3 and dup 1 eq exch 2 eq or {
    3 index 3 index moveto
    2 copy
    currentfont /FontType get 3 eq { fCol } { sCol } ifelse
    xycp currentpoint stroke moveto
  } if
  pdfTextRender 4 and 0 ne {
    4 2 roll moveto xycp
    /pdfTextClipPath [ pdfTextClipPath aload pop
      {/moveto cvx}
      {/lineto cvx}
      {/curveto cvx}
      {/closepath cvx}
    pathforall ] def
    currentpoint newpath moveto
  } {
    pop pop pop pop
  } ifelse
  0 pdfTextRise neg pdfTextMat dtransform rmoveto
} def
/TJm { 0.001 mul pdfFontSize mul pdfHorizScaling mul neg 0
       pdfTextMat dtransform rmoveto } def
/TJmV { 0.001 mul pdfFontSize mul neg 0 exch
        pdfTextMat dtransform rmoveto } def
/Tclip { pdfTextClipPath cvx exec clip newpath
         /pdfTextClipPath [] def } def
/Tclip* { pdfTextClipPath cvx exec eoclip newpath
         /pdfTextClipPath [] def } def
% Level 2/3 image operators
/pdfImBuf 100 string def
/pdfImStr {
  2 copy exch length lt {
    2 copy get exch 1 add exch
  } {
    ()
  } ifelse
} def
/skipEOD {
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
/pdfIm { image skipEOD } def
/pdfMask {
  /ReusableStreamDecode filter
  skipEOD
  /maskStream exch def
} def
/pdfMaskEnd { maskStream closefile } def
/pdfMaskInit {
  /maskArray exch def
  /maskIdx 0 def
} def
/pdfMaskSrc {
  maskIdx maskArray length lt {
    maskArray maskIdx get
    /maskIdx maskIdx 1 add def
  } {
    ()
  } ifelse
} def
/pdfImM { fCol imagemask skipEOD } def
/pr { 2 index 2 index 3 2 roll putinterval 4 add } def
/pdfImClip {
  gsave
  0 2 4 index length 1 sub {
    dup 4 index exch 2 copy
    get 5 index div put
    1 add 3 index exch 2 copy
    get 3 index div put
  } for
  pop pop rectclip
} def
/pdfImClipEnd { grestore } def
% shading operators
/colordelta {
  false 0 1 3 index length 1 sub {
    dup 4 index exch get 3 index 3 2 roll get sub abs 0.004 gt {
      pop true
    } if
  } for
  exch pop exch pop
} def
/funcCol { func n array astore } def
/funcSH {
  dup 0 eq {
    true
  } {
    dup 6 eq {
      false
    } {
      4 index 4 index funcCol dup
      6 index 4 index funcCol dup
      3 1 roll colordelta 3 1 roll
      5 index 5 index funcCol dup
      3 1 roll colordelta 3 1 roll
      6 index 8 index funcCol dup
      3 1 roll colordelta 3 1 roll
      colordelta or or or
    } ifelse
  } ifelse
  {
    1 add
    4 index 3 index add 0.5 mul exch 4 index 3 index add 0.5 mul exch
    6 index 6 index 4 index 4 index 4 index funcSH
    2 index 6 index 6 index 4 index 4 index funcSH
    6 index 2 index 4 index 6 index 4 index funcSH
    5 3 roll 3 2 roll funcSH pop pop
  } {
    pop 3 index 2 index add 0.5 mul 3 index  2 index add 0.5 mul
    funcCol sc
    dup 4 index exch mat transform m
    3 index 3 index mat transform l
    1 index 3 index mat transform l
    mat transform l pop pop h f*
  } ifelse
} def
/axialCol {
  dup 0 lt {
    pop t0
  } {
    dup 1 gt {
      pop t1
    } {
      dt mul t0 add
    } ifelse
  } ifelse
  func n array astore
} def
/axialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index axialCol 2 index axialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index axialSH
    exch 3 2 roll axialSH
  } {
    pop 2 copy add 0.5 mul
    axialCol sc
    exch dup dx mul x0 add exch dy mul y0 add
    3 2 roll dup dx mul x0 add exch dy mul y0 add
    dx abs dy abs ge {
      2 copy yMin sub dy mul dx div add yMin m
      yMax sub dy mul dx div add yMax l
      2 copy yMax sub dy mul dx div add yMax l
      yMin sub dy mul dx div add yMin l
      h f*
    } {
      exch 2 copy xMin sub dx mul dy div add xMin exch m
      xMax sub dx mul dy div add xMax exch l
      exch 2 copy xMax sub dx mul dy div add xMax exch l
      xMin sub dx mul dy div add xMin exch l
      h f*
    } ifelse
  } ifelse
} def
/radialCol {
  dup t0 lt {
    pop t0
  } {
    dup t1 gt {
      pop t1
    } if
  } ifelse
  func n array astore
} def
/radialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index dt mul t0 add radialCol
      2 index dt mul t0 add radialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index radialSH
    exch 3 2 roll radialSH
  } {
    pop 2 copy add 0.5 mul dt mul t0 add
    radialCol sc
    encl {
      exch dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      0 360 arc h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      360 0 arcn h f
    } {
      2 copy
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arcn
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arcn h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arc
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arc h f
    } ifelse
  } ifelse
} def
end
%%EndResource
/CIDInit /ProcSet findresource begin
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-H def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-V def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  /WMode 1 def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
end
%%EndProlog
%%BeginSetup
xpdf begin
%%EndSetup
pdfStartPage
%%EndPageSetup
[] 0 d
1 i
0 j
0 J
10 M
1 w
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
false op
false OP
{} settransfer
0 0 2418.96 1083.12 re
W
q
[0.24 0 0 -0.24 0 1083.12] cm
q
0 0 10079.166 4511.5674 re
W*
q
[3.012093 0 0 3.012532 355.47794 1201.39771] cm
/DeviceRGB {} CS
[1 1 1] SC
/DeviceRGB {} cs
[1 1 1] sc
222 158.300003 m
191 159 164.5 179.3 142.5 219.10001 c
119.400002 263.89999 108 313.70001 108.199997 368.5 c
108.599998 375.10001 109.299995 375.70001 110.399994 370.39999 c
119.699997 330.10001 129.399994 298.59998 139.5 275.79999 c
149.399994 252.89999 160.399994 234.09999 172.39999 219.59999 c
200 187.5 223.89999 182.29999 244.2 203.99998 c
266.39999 229.59999 278.20001 272.79999 279.60001 333.39996 c
278.39999 414.89996 267.70001 476.49997 247.5 518.39996 c
222.2 569.39996 196.2 586.39996 169.8 569.19995 c
133.800003 540.49994 113.800003 476.89996 109.800003 378.59995 c
108.400002 375.19995 107.100006 377.69995 106.100006 386.09995 c
104.200005 396.29996 102.900009 407.49994 102.100006 419.39993 c
99.100006 472.79993 106.200005 518.09991 123.300003 555.29993 c
140.800003 590.59991 164.100006 608.49994 193.20001 609.09991 c
224.60001 608.59991 253.20001 588.09991 279.10001 547.3999 c
304.89999 504.8999 321.5 453.09991 328.80002 391.7999 c
331.50003 326.59991 322.70001 271.09991 302.50003 225.2999 c
282.10004 181.69989 255.40002 159.299896 222.50003 158.099899 c
f
452 134.100006 m
435.89999 107.700005 405.10001 94.800003 359.60001 95.600006 c
309.30002 98.000008 260.40002 113.000008 213 140.600006 c
207.5 144.200012 207.3 145.200012 212.39999 143.5 c
252 131.399994 284.09998 124 308.79999 121.400002 c
333.59998 118.5 355.29999 118.599998 373.89999 121.800003 c
415.5 129.699997 432 147.800003 423.29999 176.20001 c
412.19998 208.20001 380.69998 240.00002 328.89999 271.60001 c
257.70001 311.30002 199 332.89999 152.699997 336.29999 c
95.799995 339.89999 68.199997 325.89999 69.899994 294.39999 c
77 248.8 122 199.7 205.10001 147 c
207.3 144.100006 204.5 144.300003 196.8 147.600006 c
187 151.100006 176.7 155.5 165.900009 160.800003 c
118.200012 184.90001 82.400009 213.70001 58.800011 247.10001 c
37.000011 279.89999 33.10001 309.10001 47.10001 334.5 c
63.200012 361.39999 95.300011 375.89999 143.500015 378 c
193.20001 379.10001 246.40002 367.60001 303.10004 343.20001 c
360.90002 312.90002 404.60004 277.60001 434.10004 237.20001 c
461.70004 197.70001 467.70004 163.400009 452.30005 134.300018 c
f
588 321.20001 m
602.79999 294 598.59998 260.90002 575.09998 221.90001 c
547.79999 179.5 510.39996 144.700012 462.79999 117.500008 c
456.89999 114.500008 456 114.800011 460 118.400009 c
490.29999 146.600006 512.70001 170.80002 527.40002 190.80002 c
542.30005 210.90002 553.10004 229.70001 559.60004 247.40002 c
573.60004 287.40002 566.10004 310.70001 537.20001 317.30002 c
503.90002 323.70001 460.70001 312.30002 407.40002 283.30002 c
337.50003 241.50002 289.40002 201.40002 263.20001 163.100021 c
231.70001 115.600021 230.00002 84.70002 258.10001 70.400024 c
301 53.600025 366 68.100021 453.20001 113.800026 c
456.80002 114.200027 455.30002 111.900024 448.5 106.900024 c
440.60001 100.100021 431.60001 93.400024 421.60001 86.700027 c
376.89999 57.400028 334.10001 40.900028 293.29999 37.100029 c
253.99998 34.600029 226.79999 45.80003 211.69998 70.700027 c
196.39998 98.100029 199.89998 133.200027 222.19998 175.90002 c
246.09998 219.50003 282.69998 259.80002 332.09998 296.70001 c
387.19998 331.60001 439.69998 351.80002 489.39996 357.10001 c
537.39996 361.20001 570.19995 349.30002 587.59998 321.39999 c
f
494 532.5 m
525 531.79999 551.5 511.5 573.5 471.70001 c
596.59998 426.90002 608 377.10001 607.79999 322.30002 c
607.39996 315.70001 606.70001 315.10001 605.59998 320.40002 c
596.29999 360.70001 586.59998 392.20001 576.5 415.00003 c
566.59998 437.90002 555.59998 456.70004 543.59998 471.20004 c
516 503.30005 492.09998 508.50003 471.79999 486.80005 c
449.59998 461.20004 437.79999 418.00006 436.39999 357.40005 c
437.60001 275.90005 448.29999 214.30005 468.5 172.40005 c
493.79999 121.400055 519.79999 104.400055 546.20001 121.600052 c
582.20001 150.300049 602.20001 213.90005 606.20001 312.20007 c
607.60004 315.60007 608.90002 313.10007 609.90002 304.70007 c
611.80005 294.50006 613.10004 283.30008 613.90002 271.40009 c
616.90002 218.00009 609.80005 172.70009 592.70001 135.500092 c
575.20001 100.200089 551.90002 82.300095 522.79999 81.700089 c
491.39999 82.200089 462.79999 102.700089 436.89999 143.400085 c
411.10001 185.90009 394.5 237.70009 387.19998 299.00009 c
384.49997 364.20007 393.29999 419.70007 413.49997 465.50009 c
433.89996 509.1001 460.59998 531.50012 493.49997 532.70007 c
f
128 369.60001 m
113.199997 396.80002 117.400002 429.89999 140.899994 468.90002 c
168.2 511.30002 205.59999 546.10004 253.2 573.30005 c
259.10001 576.30005 260 576.00006 256 572.40002 c
225.7 544.20001 203.3 520 188.60001 500.00003 c
173.70001 479.90002 162.900009 461.10004 156.400009 443.40002 c
142.400009 403.40002 149.900009 380.10004 178.8 373.50003 c
212.10001 367.10004 255.3 378.50003 308.60001 407.50003 c
378.5 449.30002 426.60001 489.40002 452.79999 527.70001 c
484.29999 575.20001 486 606.10004 457.89999 620.40002 c
415 637.20001 350 622.70001 262.79999 577 c
259.19998 576.59998 260.69998 578.90002 267.5 583.90002 c
275.39999 590.70001 284.39999 597.40002 294.39999 604.10004 c
339.10001 633.40002 381.89999 649.90002 422.70001 653.70001 c
462 656.20001 489.20001 645 504.30002 620.10004 c
519.60004 592.70001 516.10004 557.60004 493.80002 514.90002 c
469.90002 471.30002 433.30002 431.00003 383.90002 394.10004 c
328.80002 359.20004 276.30002 339.00003 226.60002 333.70004 c
178.60002 329.60004 145.800018 341.50003 128.400024 369.40005 c
f
264 556.70001 m
280.10001 583.10004 310.89999 596 356.39999 595.20001 c
406.69998 592.79999 455.59998 577.79999 503 550.20001 c
508.5 546.60004 508.70001 545.60004 503.60001 547.29999 c
464 559.39996 431.90002 566.79999 407.20001 569.39996 c
382.40002 572.29999 360.70001 572.19995 342.10001 568.99994 c
300.5 561.09991 284 542.99994 292.70001 514.59991 c
303.80002 482.59991 335.30002 450.79993 387.10001 419.19992 c
458.29999 379.49991 517 357.89993 563.29999 354.49994 c
620.20001 350.89993 647.79999 364.89993 646.09998 396.39993 c
639.19995 441.89993 594.19995 490.99994 510.99997 543.69995 c
508.79996 546.59998 511.59998 546.39996 519.29999 543.09998 c
529.09998 539.59998 539.39996 535.19995 550.20001 529.89996 c
597.90002 505.79996 633.70001 476.99997 657.29999 443.59998 c
679.09998 410.79999 683 381.59998 669 356.19998 c
652.90002 329.29999 620.79999 314.79999 572.70001 312.69998 c
523 311.59998 469.80002 323.09998 413.10001 347.49997 c
355.30002 377.79996 311.60001 413.09998 282.10001 453.49997 c
254.5 492.99997 248.5 527.29999 263.89999 556.39996 c
f
Q
q
[35.241482 0 0 35.24662 9691.459 352.46622] cm
/DeviceRGB {} CS
[1 1 1] SC
/DeviceRGB {} cs
[1 1 1] sc
-185 0 3 108 re
f
Q
q
[98.918823 0 0 98.93325 3806.1311 712.50427] cm
/DeviceRGB {} CS
[1 1 1] SC
/DeviceRGB {} cs
[1 1 1] sc
9.88 15.32 m
10.78 13.76 l
13.5 18.440001 l
15.3 18.440001 l
14.900001 17.800001 11.1 11.300001 10.780001 10.660001 c
6.860001 17.460001 l
5.400001 20 l
0 20 l
0.3 19.5 2.32 15.98 4.260001 12.6 c
5.400001 10.620001 6.660001 8.400001 8.080001 5.980001 c
9.880001 5.980001 l
6.160001 12.42 l
2.700001 18.440001 l
4.500001 18.440001 l
6.960001 14.1 8.500001 11.540001 10.780001 7.540001 c
10.920001 7.780001 17.960001 19.98 18 20 c
12.6 20 l
9.88 15.32 l
h
20.799999 5.98 m
29.4 5.98 l
33.139999 6.14 36.099998 9.22 36.099998 12.98 c
36.099998 16.76 33.139999 19.84 29.399998 20 c
20.799997 20 l
20.799997 9.1 l
29.399998 9.1 l
31.419998 9.26 33.019997 10.92 33.019997 13 c
33.019997 15 31.479996 16.719999 29.479996 16.880001 c
23.919996 16.880001 l
23.919996 11.960001 l
25.479996 11.960001 l
25.479996 15.320002 l
29.399996 15.300001 l
30.579996 15.200001 31.479996 14.180001 31.479996 13.000001 c
31.479996 11.980001 30.839996 11.140001 29.939995 10.800001 c
29.599995 10.660001 29.399994 10.660001 28.859995 10.660001 c
22.359995 10.660001 l
22.359995 18.440001 l
29.399994 18.440001 l
32.259995 18.280001 34.539993 15.92 34.539993 12.980001 c
34.539993 10.08 32.259995 7.7 29.399994 7.54 c
20.799994 7.54 l
20.799994 5.980001 l
20.799999 5.98 l
h
49.84 13.78 m
41.900002 13.78 41.779999 13.759999 41.68 13.759999 c
41.639999 13.759999 l
39.639999 13.599999 38.099998 11.9 38.099998 9.879999 c
38.099998 7.719999 39.84 5.979999 42 5.979999 c
50.400002 5.979999 l
52.080002 5.979999 53.440002 7.339999 53.440002 9.039999 c
53.440002 10.659999 l
42.060001 10.659999 l
42.040001 10.659999 l
42.02 10.659999 l
41.560001 10.639998 41.260002 10.299999 41.260002 9.879999 c
41.260002 9.459999 41.580002 9.119999 42.000004 9.099999 c
51.880005 9.099999 l
51.880005 9.06 l
51.880005 8.2 51.220005 7.54 50.360004 7.54 c
42.000004 7.54 l
40.720005 7.54 39.660004 8.58 39.660004 9.879999 c
39.660004 11.079999 40.560005 12.039999 41.700005 12.199999 c
49.680004 12.199999 49.760006 12.219999 49.900005 12.219999 c
51.900005 12.379999 53.440006 14.099999 53.440006 16.099999 c
53.440006 18.259998 51.700005 19.999998 49.560005 19.999998 c
41.140007 19.999998 l
39.460007 19.999998 38.100006 18.639997 38.100006 16.959999 c
38.100006 15.319999 l
49.560005 15.319999 l
50.540005 15.379999 50.540005 16.82 49.560005 16.879999 c
39.660004 16.879999 l
39.660004 16.92 l
39.660004 17.780001 40.320004 18.440001 41.180004 18.440001 c
49.560005 18.440001 l
50.820004 18.440001 51.900005 17.440001 51.900005 16.1 c
51.900005 14.900001 51.000004 13.940001 49.840004 13.780001 c
49.84 13.78 l
h
f
Q
q
[11.859696 0 0 11.861425 3802.8103 2968.8186] cm
/DeviceRGB {} CS
[1 1 1] SC
/DeviceRGB {} cs
[1 1 1] sc
9.54 15.82 m
3.78 15.82 l
2.28 20 l
0.28 20 l
5.68 5.64 l
7.88 5.64 l
13.08 20 l
10.96 20 l
9.54 15.82 l
h
4.38 14.1 m
8.84 14.1 l
6.72 7.78 l
6.68 7.78 l
4.38 14.1 l
h
27.712 17.24 m
27.712 5.639999 l
29.591999 5.639999 l
29.591999 20 l
27.411999 20 l
20.112 8.4 l
20.071999 8.4 l
20.071999 20 l
18.191999 20 l
18.191999 5.64 l
20.491999 5.64 l
27.671999 17.240002 l
27.712 17.240002 l
27.712 17.24 l
h
34.723999 7.36 m
34.723999 5.64 l
46.383999 5.64 l
46.383999 7.360001 l
41.523998 7.360001 l
41.523998 20 l
39.584 20 l
39.584 7.36 l
34.723999 7.36 l
34.723999 7.36 l
h
59.416 8.1 m
56.096001 20 l
54.056 20 l
50.315998 5.64 l
52.415997 5.64 l
55.095997 17.32 l
55.135998 17.32 l
58.355999 5.639999 l
60.475998 5.639999 l
63.695999 17.32 l
63.736 17.32 l
66.416 5.639999 l
68.556 5.639999 l
64.776001 20 l
62.736 20 l
59.456001 8.1 l
59.416 8.1 l
h
84.528 18.280001 m
84.528 20 l
73.928001 20 l
73.928001 5.64 l
84.388 5.64 l
84.388 7.360001 l
75.867996 7.360001 l
75.867996 11.76 l
83.727997 11.76 l
83.727997 13.480001 l
75.867996 13.480001 l
75.867996 18.280001 l
84.528 18.280001 l
h
92.580002 13.84 m
92.580002 20 l
90.639999 20 l
90.639999 5.64 l
97.279999 5.64 l
99.639999 5.64 102 6.460001 102 9.5 c
102 11.62 100.919998 12.4 100 12.940001 c
100.82 13.280001 101.639999 13.64 101.720001 15.64 c
101.840004 18.24 l
101.860001 19.039999 101.960007 19.34 102.560005 19.68 c
102.560005 20 l
100.180008 20 l
99.900009 19.120001 99.840012 16.940001 99.840012 16.4 c
99.840012 15.219999 99.600014 13.84 97.280014 13.84 c
92.580017 13.84 l
92.580002 13.84 l
h
92.580002 7.3 m
92.580002 12.18 l
97.080002 12.18 l
98.5 12.18 100 11.820001 100 9.700001 c
100 7.480001 98.379997 7.300001 97.419998 7.300001 c
92.580002 7.300001 l
92.580002 7.3 l
h
110.311996 7.3 m
110.311996 12.280001 l
114.171997 12.280001 l
115.911995 12.280001 117.091995 11.64 117.091995 9.700001 c
117.091995 7.880001 115.851997 7.300001 114.251999 7.300001 c
110.311996 7.300001 l
110.311996 7.3 l
h
110.311996 13.940001 m
110.311996 20 l
108.371994 20 l
108.371994 5.64 l
114.831993 5.64 l
117.491997 5.64 119.091995 7.360001 119.091995 9.68 c
119.091995 11.68 117.951996 13.940001 114.831993 13.940001 c
110.311996 13.940001 l
h
133.835999 20 m
133.835999 5.64 l
139.656006 5.64 l
143.396011 5.64 145.695999 8.480001 145.695999 12.620001 c
145.695999 15.840001 144.296005 20 139.576004 20 c
133.835999 20 l
h
135.776001 7.3 m
135.776001 18.34 l
139.535995 18.34 l
142.056 18.34 143.695999 16.360001 143.695999 12.74 c
143.695999 9.119999 142.035995 7.3 139.395996 7.3 c
135.776001 7.3 l
135.776001 7.3 l
h
153.748001 5.64 m
153.748001 20 l
151.807999 20 l
151.807999 5.64 l
153.748001 5.64 l
153.748001 5.64 l
h
166.660004 13.98 m
166.660004 12.32 l
172.96001 12.32 l
172.96001 20 l
171.70001 20 l
171.24001 18.139999 l
170.26001 19.5 168.46001 20.379999 166.5 20.379999 c
164.039993 20.379999 162.839996 19.48 162.100006 18.759998 c
159.900009 16.679998 159.840012 14.219998 159.840012 12.699999 c
159.840012 9.199999 161.960007 5.259999 166.640015 5.259999 c
169.32001 5.259999 172.30002 6.779999 172.72002 9.999998 c
170.84001 9.999998 l
170.22002 7.499998 168.12001 6.979998 166.540009 6.979998 c
163.960007 6.979998 161.840012 9.039998 161.840012 12.799998 c
161.840012 15.719998 162.800018 18.719997 166.62001 18.719997 c
167.340012 18.719997 168.50002 18.639997 169.56001 17.799997 c
170.82001 16.799997 171.14001 15.519998 171.14001 13.979998 c
166.660019 13.979998 l
166.660004 13.98 l
h
181.532 5.64 m
181.532 20 l
179.592 20 l
179.592 5.64 l
181.532 5.64 l
181.532 5.64 l
h
186.944 7.36 m
186.944 5.64 l
198.604 5.64 l
198.604 7.360001 l
193.744 7.360001 l
193.744 20 l
191.804 20 l
191.804 7.36 l
186.944 7.36 l
186.944 7.36 l
h
211.756 15.82 m
205.996 15.82 l
204.496 20 l
202.496 20 l
207.896 5.64 l
210.09599 5.64 l
215.29599 20 l
213.17599 20 l
211.756 15.82 l
h
206.59599 14.1 m
211.056 14.1 l
208.936 7.78 l
208.89601 7.78 l
206.59599 14.1 l
h
222.34801 5.64 m
222.34801 18.280001 l
229.62801 18.280001 l
229.62801 20 l
220.408 20 l
220.408 5.64 l
222.34801 5.64 l
222.34801 5.64 l
h
254.23199 9.84 m
252.41199 9.84 l
252.31198 7.62 250.47198 6.92 248.85199 6.92 c
247.63199 6.92 245.57199 7.26 245.57199 9.440001 c
245.57199 10.660001 246.43199 11.06 247.27199 11.26 c
251.37199 12.200001 l
253.23199 12.64 254.63199 13.76 254.63199 16.040001 c
254.63199 19.440001 251.47198 20.380001 249.01199 20.380001 c
246.35199 20.380001 245.312 19.580002 244.672 19.000002 c
243.452 17.900002 243.21199 16.700003 243.21199 15.360002 c
245.032 15.360002 l
245.032 17.960001 247.15199 18.720001 248.992 18.720001 c
250.392 18.720001 252.752 18.360001 252.752 16.300001 c
252.752 14.800001 252.052 14.320002 249.692 13.760001 c
246.752 13.080001 l
245.812 12.860001 243.692 12.200001 243.692 9.700001 c
243.692 7.460001 245.15201 5.260001 248.632 5.260001 c
253.65201 5.260001 254.15201 8.26 254.23201 9.84 c
254.23199 9.84 l
h
266.54401 14.22 m
266.54401 20 l
264.604 20 l
264.604 14.22 l
259.18399 5.64 l
261.444 5.64 l
265.564 12.540001 l
269.68399 5.640001 l
271.96399 5.640001 l
266.54401 14.22 l
h
287.57599 9.84 m
285.75598 9.84 l
285.65598 7.62 283.81598 6.92 282.19598 6.92 c
280.97598 6.92 278.91599 7.26 278.91599 9.440001 c
278.91599 10.660001 279.77597 11.06 280.616 11.26 c
284.716 12.200001 l
286.57599 12.64 287.97601 13.76 287.97601 16.040001 c
287.97601 19.440001 284.81601 20.380001 282.35602 20.380001 c
279.69601 20.380001 278.65601 19.580002 278.01602 19.000002 c
276.79602 17.900002 276.55603 16.700003 276.55603 15.360002 c
278.37604 15.360002 l
278.37604 17.960001 280.49603 18.720001 282.33603 18.720001 c
283.73602 18.720001 286.09604 18.360001 286.09604 16.300001 c
286.09604 14.800001 285.39603 14.320002 283.03604 13.760001 c
280.09604 13.080001 l
279.15604 12.860001 277.03604 12.200001 277.03604 9.700001 c
277.03604 7.460001 278.49603 5.260001 281.97604 5.260001 c
286.99603 5.260001 287.49603 8.26 287.57605 9.84 c
287.57599 9.84 l
h
292.52802 7.36 m
292.52802 5.64 l
304.18802 5.64 l
304.18802 7.360001 l
299.32803 7.360001 l
299.32803 20 l
297.38803 20 l
297.38803 7.36 l
292.52805 7.36 l
292.52802 7.36 l
h
320.12 18.280001 m
320.12 20 l
309.51999 20 l
309.51999 5.64 l
319.97998 5.64 l
319.97998 7.360001 l
311.45999 7.360001 l
311.45999 11.76 l
319.31998 11.76 l
319.31998 13.480001 l
311.45999 13.480001 l
311.45999 18.280001 l
320.12 18.280001 l
h
339.69199 20 m
337.81198 20 l
337.81198 11.520001 l
337.81198 11.1 337.85199 9.280001 337.85199 7.940001 c
337.81198 7.940001 l
333.77197 20 l
331.85196 20 l
327.81195 7.96 l
327.77194 7.96 l
327.77194 9.28 327.81195 11.1 327.81195 11.520001 c
327.81195 20 l
325.93195 20 l
325.93195 5.64 l
328.71194 5.64 l
332.81195 17.780001 l
332.85196 17.780001 l
336.93195 5.64 l
339.69196 5.64 l
339.69196 20 l
339.69199 20 l
h
356.46399 9.84 m
354.64398 9.84 l
354.54398 7.62 352.70398 6.92 351.08398 6.92 c
349.86398 6.92 347.80399 7.26 347.80399 9.440001 c
347.80399 10.660001 348.66397 11.06 349.504 11.26 c
353.604 12.200001 l
355.46399 12.64 356.86401 13.76 356.86401 16.040001 c
356.86401 19.440001 353.70401 20.380001 351.24402 20.380001 c
348.58401 20.380001 347.54401 19.580002 346.90402 19.000002 c
345.68402 17.900002 345.44403 16.700003 345.44403 15.360002 c
347.26404 15.360002 l
347.26404 17.960001 349.38403 18.720001 351.22403 18.720001 c
352.62402 18.720001 354.98404 18.360001 354.98404 16.300001 c
354.98404 14.800001 354.28403 14.320002 351.92404 13.760001 c
348.98404 13.080001 l
348.04404 12.860001 345.92404 12.200001 345.92404 9.700001 c
345.92404 7.460001 347.38403 5.260001 350.86404 5.260001 c
355.88403 5.260001 356.38403 8.26 356.46405 9.84 c
356.46399 9.84 l
h
f
Q
Q
Q
showpage
%%PageTrailer
pdfEndPage
%%Trailer
end
%%DocumentSuppliedResources:
%%EOF
